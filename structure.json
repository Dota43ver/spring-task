{
  "src": {
    "main": {
      "java": {
        "com": {
          "facudev": {
            "Task_Springboot": {
              "config": {
                "JwtAuthenticationFilter.java": "package com.facudev.Task_Springboot.config;\r\n\r\nimport com.facudev.Task_Springboot.services.jwt.UserService;\r\nimport com.facudev.Task_Springboot.utils.JwtUtil;\r\nimport jakarta.servlet.FilterChain;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport lombok.NonNull;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.context.SecurityContext;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport java.io.IOException;\r\n\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\r\n\r\n    private final JwtUtil jwtUtil;\r\n\r\n    private final UserService userService;\r\n\r\n    @Override\r\n    protected void doFilterInternal(@NonNull HttpServletRequest request,\r\n                                    @NonNull HttpServletResponse response,\r\n                                    @NonNull FilterChain filterChain) throws ServletException, IOException {\r\n\r\n        final String authHeader = request.getHeader(\"Authorization\");\r\n        final String jwt;\r\n        final String userEmail;\r\n        if (StringUtils.isEmpty(authHeader) || !StringUtils.startsWith(authHeader, \"Bearer \")){\r\n            filterChain.doFilter(request, response);\r\n            return;\r\n        }\r\n        jwt = authHeader.substring(7);\r\n        userEmail = jwtUtil.extractUserName(jwt);\r\n        if(StringUtils.isNotEmpty(userEmail) && SecurityContextHolder.getContext().getAuthentication() == null){\r\n            UserDetails userDetails = userService.userDetailService().loadUserByUsername(userEmail);\r\n            if (jwtUtil.isTokenValid(jwt, userDetails)){\r\n                SecurityContext context = SecurityContextHolder.createEmptyContext();\r\n                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(\r\n                        userDetails, null, userDetails.getAuthorities());\r\n                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\r\n                context.setAuthentication(authToken);\r\n                SecurityContextHolder.setContext(context);\r\n            }\r\n        }\r\n        filterChain.doFilter(request, response);\r\n\r\n    }\r\n}\r\n",
                "WebSecurityConfiguration.java": "package com.facudev.Task_Springboot.config;\r\n\r\nimport com.facudev.Task_Springboot.enums.UserRole;\r\nimport com.facudev.Task_Springboot.services.jwt.UserService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.AuthenticationProvider;\r\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport org.springframework.web.filter.CorsFilter;\r\n\r\nimport java.util.List;\r\n\r\nimport static org.springframework.security.config.http.SessionCreationPolicy.STATELESS;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableMethodSecurity\r\n@RequiredArgsConstructor\r\npublic class WebSecurityConfiguration {\r\n\r\n\r\n    private final JwtAuthenticationFilter jwtAuthenticationFilter;\r\n\r\n    private final UserService userService;\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{\r\n        http.csrf(AbstractHttpConfigurer::disable)\r\n                .cors(Customizer.withDefaults())\r\n                .authorizeHttpRequests(request -> request.requestMatchers(\"/api/auth/**\").permitAll()\r\n                        .requestMatchers(\"/api/admin/**\").hasAnyAuthority(UserRole.ADMIN.name())\r\n                        .requestMatchers(\"/api/employee/**\").hasAnyAuthority(UserRole.EMPLOYEE.name())\r\n                        .anyRequest().authenticated()).sessionManagement(manager -> manager.sessionCreationPolicy(STATELESS))\r\n                .authenticationProvider(authenticationProvider()).addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\r\n                return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public CorsFilter corsFilter() {\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        CorsConfiguration corsConfig = new CorsConfiguration();\r\n        corsConfig.setAllowedOrigins(List.of(\"http://localhost:4200\")); // Origen permitido\r\n        corsConfig.setAllowedMethods(List.of(\"GET\", \"POST\", \"PUT\", \"DELETE\")); // MÃ©todos permitidos\r\n        corsConfig.setAllowedHeaders(List.of(\"Authorization\", \"Content-Type\")); // Cabeceras permitidas\r\n        corsConfig.setAllowCredentials(true); // Permitir credenciales (si es necesario)\r\n        source.registerCorsConfiguration(\"/**\", corsConfig);\r\n        return new CorsFilter(source);\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder(){\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationProvider authenticationProvider(){\r\n        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();\r\n        authProvider.setUserDetailsService(userService.userDetailService());\r\n        authProvider.setPasswordEncoder(passwordEncoder());\r\n        return authProvider;\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\r\n        return config.getAuthenticationManager();\r\n    }\r\n\r\n}\r\n"
              },
              "controller": {
                "admin": {
                  "AdminController.java": "package com.facudev.Task_Springboot.controller.admin;\r\n\r\nimport com.facudev.Task_Springboot.dto.TaskDto;\r\nimport com.facudev.Task_Springboot.services.admin.AdminService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"/api/admin\")\r\n@CrossOrigin(origins = \"http://localhost:4200\", allowedHeaders = \"*\", methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE})\r\npublic class AdminController {\r\n\r\n    private final AdminService adminService;\r\n\r\n    @GetMapping(\"/users\")\r\n    public ResponseEntity<?> getUsers(){\r\n        return ResponseEntity.ok(adminService.getUsers());\r\n    }\r\n\r\n\r\n    @PostMapping(\"/task\")\r\n    public ResponseEntity<TaskDto> createTask(@RequestBody TaskDto taskDto){\r\n        TaskDto createdTaskDTO = adminService.createTask(taskDto);\r\n        if(createdTaskDTO == null) return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdTaskDTO);\r\n    }\r\n\r\n    @GetMapping(\"/tasks\")\r\n    public ResponseEntity<?> getAllTasks(){\r\n        return ResponseEntity.ok(adminService.getALlTask());\r\n    }\r\n\r\n    @DeleteMapping(\"/task/{id}\")\r\n    public ResponseEntity<Void> deleteTask(@PathVariable Long id){\r\n        adminService.deleteTask(id);\r\n        return ResponseEntity.ok(null);\r\n    }\r\n\r\n    @GetMapping(\"/task/{id}\")\r\n    public ResponseEntity<TaskDto> getTaskById(@PathVariable Long id){\r\n        return ResponseEntity.ok(adminService.getTaskById(id));\r\n    }\r\n\r\n    @PutMapping(\"/task/{id}\")\r\n    public ResponseEntity<?> updateTask(@PathVariable Long id, @RequestBody TaskDto taskDto){\r\n        TaskDto updatedTask = adminService.updateTask(id, taskDto);\r\n        if(updatedTask == null) return ResponseEntity.notFound().build();\r\n        return ResponseEntity.ok(updatedTask);\r\n    }\r\n\r\n    @GetMapping(\"/task/search/{title}\")\r\n    public ResponseEntity<List<TaskDto>> searchTask(@PathVariable String title){\r\n        return ResponseEntity.ok(adminService.searchTaskByTitle(title));\r\n    }\r\n}\r\n"
                },
                "auth": {
                  "AuthController.java": "package com.facudev.Task_Springboot.controller.auth;\r\n\r\nimport com.facudev.Task_Springboot.dto.AuthenticationRequest;\r\nimport com.facudev.Task_Springboot.dto.AuthenticationResponse;\r\nimport com.facudev.Task_Springboot.dto.SignupRequest;\r\nimport com.facudev.Task_Springboot.dto.UserDto;\r\nimport com.facudev.Task_Springboot.entities.User;\r\nimport com.facudev.Task_Springboot.repositories.UserRepository;\r\nimport com.facudev.Task_Springboot.services.auth.AuthService;\r\nimport com.facudev.Task_Springboot.services.jwt.UserService;\r\nimport com.facudev.Task_Springboot.utils.JwtUtil;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.BadCredentialsException;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Optional;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/auth\")\r\n@RequiredArgsConstructor\r\n@CrossOrigin(\"*\")\r\npublic class AuthController {\r\n\r\n    private final AuthService authService;\r\n    private final UserRepository userRepository;\r\n    private final JwtUtil jwtUtil;\r\n    private final UserService userService;\r\n    private final AuthenticationManager authenticationManager;\r\n\r\n    @PostMapping(\"/signup\")\r\n    public ResponseEntity<?> signupUser(@RequestBody SignupRequest signupRequest){\r\n        if(authService.hasUserWithEmail(signupRequest.getEmail()))\r\n            return ResponseEntity.status(HttpStatus.NOT_ACCEPTABLE).body(\"User already exist with this email\");\r\n\r\n        UserDto createdUserDto = authService.signupUser(signupRequest);\r\n        if(createdUserDto == null)\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"User not created\");\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdUserDto);\r\n    }\r\n\r\n    @PostMapping(\"/login\")\r\n    public AuthenticationResponse login(@RequestBody AuthenticationRequest authenticationRequest){\r\n        try {\r\n            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(\r\n                    authenticationRequest.getEmail(),\r\n                    authenticationRequest.getPassword()));\r\n        }catch (BadCredentialsException e){\r\n            throw new BadCredentialsException(\"Username or Password is incorrect\");\r\n        }\r\n        final UserDetails userDetails = userService.userDetailService().loadUserByUsername(authenticationRequest.getEmail());\r\n        Optional<User> optionalUser = userRepository.findFirstByEmail(authenticationRequest.getEmail());\r\n        final String jwtToken = jwtUtil.generateToken(userDetails);\r\n        AuthenticationResponse authenticationResponse = new AuthenticationResponse();\r\n        if(optionalUser.isPresent()){\r\n            authenticationResponse.setJwt(jwtToken);\r\n            authenticationResponse.setUserId(optionalUser.get().getId());\r\n            authenticationResponse.setUserRole(optionalUser.get().getUserRole());\r\n        }\r\n\r\n        return authenticationResponse;\r\n    }\r\n\r\n\r\n}\r\n"
                },
                "employee": {
                  "EmployeeController.java": "package com.facudev.Task_Springboot.controller.employee;\r\n\r\nimport com.facudev.Task_Springboot.dto.TaskDto;\r\nimport com.facudev.Task_Springboot.services.employee.EmployeeService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/employee\")\r\n@RequiredArgsConstructor\r\npublic class EmployeeController {\r\n\r\n    private final EmployeeService employeeService;\r\n\r\n\r\n    @GetMapping(\"/tasks\")\r\n    public ResponseEntity<List<TaskDto>> getTaskByUserId(){\r\n        return ResponseEntity.ok(employeeService.getTaskByUserId());\r\n    }\r\n\r\n}\r\n"
                }
              },
              "dto": {
                "AuthenticationRequest.java": "package com.facudev.Task_Springboot.dto;\r\n\r\n\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class AuthenticationRequest {\r\n\r\n    private String email;\r\n    private String password;\r\n\r\n}\r\n",
                "AuthenticationResponse.java": "package com.facudev.Task_Springboot.dto;\r\n\r\n\r\nimport com.facudev.Task_Springboot.enums.UserRole;\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class AuthenticationResponse {\r\n\r\n    private String jwt;\r\n    private Long userId;\r\n    private UserRole userRole;\r\n\r\n}\r\n",
                "SignupRequest.java": "package com.facudev.Task_Springboot.dto;\r\n\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class SignupRequest {\r\n\r\n    private String name;\r\n    private String email;\r\n    private String password;\r\n\r\n}\r\n",
                "TaskDto.java": "package com.facudev.Task_Springboot.dto;\r\n\r\nimport com.facudev.Task_Springboot.enums.TaskStatus;\r\nimport lombok.Data;\r\n\r\nimport java.util.Date;\r\n\r\n@Data\r\npublic class TaskDto {\r\n\r\n    private Long id;\r\n    private String title;\r\n    private String description;\r\n    private Date dueDate;\r\n    private String priority;\r\n    private TaskStatus taskStatus;\r\n\r\n    private Long employeeId;\r\n    private String employeeName;\r\n}\r\n",
                "UserDto.java": "package com.facudev.Task_Springboot.dto;\r\n\r\nimport com.facudev.Task_Springboot.enums.UserRole;\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class UserDto {\r\n\r\n\r\n    private Long id;\r\n    private String name;\r\n    private String email;\r\n    private String password;\r\n    private UserRole userRole;\r\n\r\n\r\n}\r\n"
              },
              "entities": {
                "Task.java": "package com.facudev.Task_Springboot.entities;\r\n\r\nimport com.facudev.Task_Springboot.dto.TaskDto;\r\nimport com.facudev.Task_Springboot.enums.TaskStatus;\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport org.hibernate.annotations.OnDelete;\r\nimport org.hibernate.annotations.OnDeleteAction;\r\n\r\nimport java.util.Date;\r\n\r\n@Entity\r\n@Data\r\npublic class Task {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    private String title;\r\n    private String description;\r\n    private Date dueDate;\r\n    private String priority;\r\n    private TaskStatus taskStatus;\r\n    @ManyToOne(fetch = FetchType.LAZY, optional = false)\r\n    @JoinColumn(name = \"user_id\", nullable = false)\r\n    @OnDelete(action = OnDeleteAction.CASCADE)\r\n    @JsonIgnore\r\n    private User user;\r\n\r\n    public TaskDto getTaskDTO(){\r\n        TaskDto taskDTO = new TaskDto();\r\n        taskDTO.setId(id);\r\n        taskDTO.setTitle(title);\r\n        taskDTO.setDescription(description);\r\n        taskDTO.setEmployeeName(user.getName());\r\n        taskDTO.setEmployeeId(user.getId());\r\n        taskDTO.setTaskStatus(taskStatus);\r\n        taskDTO.setDueDate(dueDate);\r\n        taskDTO.setPriority(priority);\r\n        return taskDTO;\r\n    }\r\n\r\n}\r\n",
                "User.java": "package com.facudev.Task_Springboot.entities;\r\n\r\nimport com.facudev.Task_Springboot.dto.UserDto;\r\nimport com.facudev.Task_Springboot.enums.UserRole;\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport jakarta.persistence.Id;\r\nimport lombok.Data;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\n\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\n@Data\r\n@Entity\r\npublic class User implements UserDetails {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    private String name;\r\n    private String email;\r\n    private String password;\r\n    private UserRole userRole;\r\n\r\n    @Override\r\n    public Collection<? extends GrantedAuthority> getAuthorities() {\r\n        return List.of(new SimpleGrantedAuthority(userRole.name()));\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public String getUsername() {\r\n        return email;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonExpired() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonLocked() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isCredentialsNonExpired() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isEnabled() {\r\n        return true;\r\n    }\r\n\r\n    public UserDto getUserDto(){\r\n        UserDto userDto = new UserDto();\r\n        userDto.setId(id);\r\n        userDto.setName(name);\r\n        userDto.setEmail(email);\r\n        userDto.setUserRole(userRole);\r\n        return userDto;\r\n    }\r\n\r\n}\r\n"
              },
              "enums": {
                "TaskStatus.java": "package com.facudev.Task_Springboot.enums;\r\n\r\npublic enum TaskStatus {\r\n\r\n    PENDING,\r\n    INPROGRESS,\r\n    COMPLETED,\r\n    DEFERRED,\r\n    CANCELLED\r\n\r\n}\r\n",
                "UserRole.java": "package com.facudev.Task_Springboot.enums;\r\n\r\npublic enum UserRole {\r\n    ADMIN, EMPLOYEE\r\n}\r\n"
              },
              "repositories": {
                "TaskRepository.java": "package com.facudev.Task_Springboot.repositories;\r\n\r\nimport com.facudev.Task_Springboot.dto.TaskDto;\r\nimport com.facudev.Task_Springboot.entities.Task;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface TaskRepository extends JpaRepository<Task,Long> {\r\n    List<Task> findAllByTitleContaining(String title);\r\n\r\n    List<Task> findAllByUserId(Long id);\r\n}\r\n",
                "UserRepository.java": "package com.facudev.Task_Springboot.repositories;\r\n\r\nimport com.facudev.Task_Springboot.entities.User;\r\nimport com.facudev.Task_Springboot.enums.UserRole;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.Optional;\r\n\r\n@Repository\r\npublic interface UserRepository extends JpaRepository<User,Long> {\r\n    Optional<User> findFirstByEmail(String username);\r\n\r\n    Optional<User> findByUserRole(UserRole userRole);\r\n}\r\n"
              },
              "services": {
                "admin": {
                  "AdminService.java": "package com.facudev.Task_Springboot.services.admin;\r\n\r\nimport com.facudev.Task_Springboot.dto.TaskDto;\r\nimport com.facudev.Task_Springboot.dto.UserDto;\r\n\r\nimport java.util.List;\r\n\r\npublic interface AdminService {\r\n\r\n    List<UserDto> getUsers();\r\n\r\n    TaskDto createTask(TaskDto taskDto);\r\n\r\n    List <TaskDto> getALlTask();\r\n\r\n    void deleteTask(Long id);\r\n\r\n    TaskDto getTaskById(Long id);\r\n\r\n    TaskDto updateTask(Long id, TaskDto taskDto);\r\n\r\n    List <TaskDto> searchTaskByTitle(String title);\r\n}\r\n",
                  "AdminServiceImpl.java": "package com.facudev.Task_Springboot.services.admin;\r\n\r\nimport com.facudev.Task_Springboot.dto.TaskDto;\r\nimport com.facudev.Task_Springboot.dto.UserDto;\r\nimport com.facudev.Task_Springboot.entities.Task;\r\nimport com.facudev.Task_Springboot.entities.User;\r\nimport com.facudev.Task_Springboot.enums.TaskStatus;\r\nimport com.facudev.Task_Springboot.enums.UserRole;\r\nimport com.facudev.Task_Springboot.repositories.TaskRepository;\r\nimport com.facudev.Task_Springboot.repositories.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AdminServiceImpl implements AdminService{\r\n\r\n    private final UserRepository userRepository;\r\n\r\n    private final TaskRepository taskRepository;\r\n\r\n    @Override\r\n    public List<UserDto> getUsers() {\r\n        return userRepository.findAll()\r\n                .stream()\r\n                .filter(user -> user.getUserRole() == UserRole.EMPLOYEE)\r\n                .map(User::getUserDto)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public TaskDto createTask(TaskDto taskDto) {\r\n        Optional<User> optionalUser = userRepository.findById(taskDto.getEmployeeId());\r\n        if(optionalUser.isPresent()){\r\n            Task task = new Task();\r\n            task.setTitle(taskDto.getTitle());\r\n            task.setDescription(taskDto.getDescription());\r\n            task.setPriority(taskDto.getPriority());\r\n            task.setDueDate(taskDto.getDueDate());\r\n            task.setTaskStatus(TaskStatus.INPROGRESS);\r\n            task.setUser(optionalUser.get());\r\n            return taskRepository.save(task).getTaskDTO();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<TaskDto> getALlTask() {\r\n        return taskRepository.findAll()\r\n                .stream()\r\n                .sorted(Comparator.comparing(Task::getDueDate).reversed())\r\n                .map(Task::getTaskDTO)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public void deleteTask(Long id) {\r\n        taskRepository.deleteById(id);\r\n    }\r\n\r\n    @Override\r\n    public TaskDto getTaskById(Long id) {\r\n        Optional<Task> optionalTask = taskRepository.findById(id);\r\n        return optionalTask.map(Task::getTaskDTO).orElse(null);\r\n    }\r\n\r\n    @Override\r\n    public TaskDto updateTask(Long id, TaskDto taskDto) {\r\n        Optional<Task> optionalTask = taskRepository.findById(id);\r\n        Optional<User> optionalUser = userRepository.findById(taskDto.getEmployeeId());\r\n        if(optionalTask.isPresent() && optionalUser.isPresent()){\r\n            Task existingTask = optionalTask.get();\r\n            existingTask.setTitle(taskDto.getTitle());\r\n            existingTask.setDescription(taskDto.getDescription());\r\n            existingTask.setDueDate(taskDto.getDueDate());\r\n            existingTask.setPriority(taskDto.getPriority());\r\n            existingTask.setTaskStatus(mapStringToTaskStatus(String.valueOf(taskDto.getTaskStatus())));\r\n            existingTask.setUser(optionalUser.get());\r\n            return taskRepository.save(existingTask).getTaskDTO();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<TaskDto> searchTaskByTitle(String title) {\r\n        return taskRepository.findAllByTitleContaining(title)\r\n                .stream()\r\n                .sorted(Comparator.comparing(Task::getDueDate).reversed())\r\n                .map(Task::getTaskDTO)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    private TaskStatus mapStringToTaskStatus(String status){\r\n        return switch (status){\r\n            case \"PENDING\" -> TaskStatus.PENDING;\r\n            case \"INPROGRESS\" -> TaskStatus.INPROGRESS;\r\n            case \"COMPLETED\" -> TaskStatus.COMPLETED;\r\n            case \"DEFERRED\" -> TaskStatus.DEFERRED;\r\n            default -> TaskStatus.CANCELLED;\r\n        };\r\n    }\r\n}\r\n"
                },
                "auth": {
                  "AuthService.java": "package com.facudev.Task_Springboot.services.auth;\r\n\r\nimport com.facudev.Task_Springboot.dto.SignupRequest;\r\nimport com.facudev.Task_Springboot.dto.UserDto;\r\n\r\npublic interface AuthService {\r\n\r\n\r\n    UserDto signupUser(SignupRequest signupRequest);\r\n    boolean hasUserWithEmail(String email);\r\n\r\n\r\n}\r\n",
                  "AuthServiceImpl.java": "package com.facudev.Task_Springboot.services.auth;\r\n\r\nimport com.facudev.Task_Springboot.dto.SignupRequest;\r\nimport com.facudev.Task_Springboot.dto.UserDto;\r\nimport com.facudev.Task_Springboot.entities.User;\r\nimport com.facudev.Task_Springboot.enums.UserRole;\r\nimport com.facudev.Task_Springboot.repositories.UserRepository;\r\nimport jakarta.annotation.PostConstruct;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Optional;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AuthServiceImpl implements AuthService{\r\n\r\n    private final UserRepository userRepository;\r\n\r\n    @PostConstruct\r\n    public void createAnAdminAccount(){\r\n        Optional<User> optionalUser = userRepository.findByUserRole(UserRole.ADMIN);\r\n        if (optionalUser.isEmpty()){\r\n            User user = new User();\r\n            user.setEmail(\"admin@test.com\");\r\n            user.setName(\"admin\");\r\n            user.setPassword(new BCryptPasswordEncoder().encode(\"admin\"));\r\n            user.setUserRole(UserRole.ADMIN);\r\n            userRepository.save(user);\r\n            System.out.println(\"admin account created successfully\");\r\n        }else {\r\n            System.out.println(\"Admin account already exist!\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public UserDto signupUser(SignupRequest signupRequest) {\r\n        User user = new User();\r\n        user.setEmail(signupRequest.getEmail());\r\n        user.setName(signupRequest.getName());\r\n        user.setPassword(new BCryptPasswordEncoder().encode(signupRequest.getPassword()));\r\n        user.setUserRole(UserRole.EMPLOYEE);\r\n        User createdUser = userRepository.save(user);\r\n        return createdUser.getUserDto();\r\n    }\r\n\r\n    @Override\r\n    public boolean hasUserWithEmail(String email) {\r\n        return userRepository.findFirstByEmail(email).isPresent();\r\n    }\r\n}\r\n"
                },
                "employee": {
                  "EmployeeService.java": "package com.facudev.Task_Springboot.services.employee;\r\n\r\nimport com.facudev.Task_Springboot.dto.TaskDto;\r\n\r\nimport java.util.List;\r\n\r\npublic interface EmployeeService {\r\n\r\n    List<TaskDto> getTaskByUserId();\r\n\r\n}\r\n",
                  "EmployeeServiceImpl.java": "package com.facudev.Task_Springboot.services.employee;\r\n\r\nimport com.facudev.Task_Springboot.dto.TaskDto;\r\nimport com.facudev.Task_Springboot.entities.Task;\r\nimport com.facudev.Task_Springboot.entities.User;\r\nimport com.facudev.Task_Springboot.repositories.TaskRepository;\r\nimport com.facudev.Task_Springboot.utils.JwtUtil;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class EmployeeServiceImpl implements EmployeeService{\r\n\r\n    private final TaskRepository taskRepository;\r\n    private final JwtUtil jwtUtil;\r\n\r\n    @Override\r\n    public List<TaskDto> getTaskByUserId() {\r\n        User user =jwtUtil.getLogeedInUser();\r\n        if(user != null){\r\n            taskRepository.findAllByUserId(user.getId())\r\n                    .stream()\r\n                    .sorted(Comparator.comparing(Task::getDueDate).reversed())\r\n                    .map(Task::getTaskDTO)\r\n                    .collect(Collectors.toList());\r\n        }\r\n        throw new EntityNotFoundException(\"User not found\");\r\n    }\r\n}\r\n"
                },
                "jwt": {
                  "UserService.java": "package com.facudev.Task_Springboot.services.jwt;\r\n\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\n\r\npublic interface UserService {\r\n\r\n    UserDetailsService userDetailService();\r\n\r\n}\r\n",
                  "UserServiceImpl.java": "package com.facudev.Task_Springboot.services.jwt;\r\n\r\nimport com.facudev.Task_Springboot.repositories.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class UserServiceImpl implements UserService{\r\n\r\n    private final UserRepository userRepository;\r\n\r\n    @Override\r\n    public UserDetailsService userDetailService() {\r\n        return new UserDetailsService() {\r\n            @Override\r\n            public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\r\n                return userRepository.findFirstByEmail(username).orElseThrow(()-> new UsernameNotFoundException(\"User not found\"));\r\n            }\r\n        };\r\n    }\r\n}\r\n"
                }
              },
              "TaskSpringbootApplication.java": "package com.facudev.Task_Springboot;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class TaskSpringbootApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(TaskSpringbootApplication.class, args);\n\t}\n\n}\n",
              "utils": {
                "JwtUtil.java": "package com.facudev.Task_Springboot.utils;\r\n\r\nimport com.facudev.Task_Springboot.entities.User;\r\nimport com.facudev.Task_Springboot.repositories.UserRepository;\r\nimport io.jsonwebtoken.Claims;\r\nimport io.jsonwebtoken.Jwts;\r\nimport io.jsonwebtoken.SignatureAlgorithm;\r\nimport io.jsonwebtoken.io.Decoders;\r\nimport io.jsonwebtoken.security.Keys;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.security.Key;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\nimport java.util.function.Function;\r\n\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class JwtUtil {\r\n\r\n    private final UserRepository userRepository;\r\n\r\n    public String generateToken(UserDetails userDetails){\r\n        return generateToken(new HashMap<>(),userDetails);\r\n    }\r\n\r\n    private String generateToken(Map<String,Object> extraClaims, UserDetails userDetails){\r\n        return Jwts.builder().setClaims(extraClaims).setSubject(userDetails.getUsername())\r\n                .setIssuedAt(new Date(System.currentTimeMillis()))\r\n                .setExpiration(new Date(System.currentTimeMillis()+1000*60*60*24))\r\n                .signWith(getSigningKey(), SignatureAlgorithm.HS256).compact();\r\n    }\r\n\r\n    private Key getSigningKey(){\r\n        byte[] keyBytes = Decoders.BASE64.decode(\"413F4428472B4B6250655368566D5970337336763979244226452948404D6351\");\r\n        return Keys.hmacShaKeyFor(keyBytes);\r\n    }\r\n\r\n    public boolean isTokenValid(String token,UserDetails userDetails){\r\n        final String userName = extractUserName(token);\r\n        return (userName.equals(userDetails.getUsername()) && !isTokenExpired(token));\r\n    }\r\n\r\n    public String extractUserName(String token){\r\n        return extractClaim(token, Claims::getSubject);\r\n    }\r\n\r\n    private boolean isTokenExpired(String token){\r\n        return extractExpiration(token).before(new Date());\r\n    }\r\n\r\n    private Date extractExpiration(String token){\r\n        return extractClaim(token, Claims::getExpiration);\r\n    }\r\n\r\n    private <T> T extractClaim(String token, Function<Claims,T> claimsResolvers){\r\n        final Claims claims = extractAllClaims(token);\r\n        return claimsResolvers.apply(claims);\r\n    }\r\n\r\n    private Claims extractAllClaims(String token){\r\n        return Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token).getBody();\r\n    }\r\n\r\n    public User getLogeedInUser(){\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if(authentication != null && authentication.isAuthenticated()){\r\n            User user = (User) authentication.getPrincipal();\r\n            Optional<User> optionalUser = userRepository.findById(user.getId());\r\n            return optionalUser.orElse(null);\r\n        }\r\n            return null;\r\n    }\r\n\r\n}\r\n"
              }
            }
          }
        }
      },
      "resources": {
        "application.properties": "spring.application.name=Task_Springboot\nspring.config.import=optional:file:.env[.properties]\nspring.datasource.url=${SPRING_DATASOURCE_URL}\nspring.datasource.username=${SPRING_DATASOURCE_USERNAME}\nspring.datasource.password=${SPRING_DATASOURCE_PASSWORD}\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\n"
      }
    },
    "test": {
      "java": {
        "com": {
          "facudev": {
            "Task_Springboot": {
              "TaskSpringbootApplicationTests.java": "package com.facudev.Task_Springboot;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass TaskSpringbootApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"
            }
          }
        }
      }
    }
  }
}